template <typename T>
class graph{
    map<T,list<T>> adjList;
    public:
    graph(int nodes){
        for(int i=1;i<=nodes;i++){
            list<T> l;
            adjList[i]=l;
        }
    }
    void addEdge(T u , T v , bool bidirectional=true){
        adjList[u].push_back(v);
        if(bidirectional){
            adjList[v].push_back(u);
        }
    }
    void print(){
        for(auto i : adjList){
            cout<<i.first<<": ";
            for(auto j : i.second){
                cout<<j<<" , ";
            }
            cout<<endl;
        }
    }
    int findJudge(int N){
        map<T,int>indegree;
        for(auto node : adjList){
            indegree[node.first] = 0;
        }
        for(auto node : adjList){
            for(auto neightbour : adjList[node.first])
                indegree[neightbour]++;
        }
        for(auto i : adjList){
            if(i.second.size()==0 and indegree[i.first]==N-1) return i.first;
        }
        return -1;
    }

};
class Solution {
public:
    int findJudge(int N, vector<vector<int>>& trust) {
        graph<int>g(N);
        for(int i=0;i<trust.size();i++){
            g.addEdge(trust[i][0],trust[i][1],false);
        }
        return g.findJudge(N);
    }
};
